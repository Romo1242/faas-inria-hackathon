#!/bin/bash
# test_worker_pipe.sh - Tester la communication avec les workers

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë  üîç Test Communication Workers        ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"

# Trouver un worker
WORKER_PID=$(pgrep -x worker | head -1)
if [ -z "$WORKER_PID" ]; then
    echo -e "${RED}‚ùå Aucun worker trouv√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Worker trouv√©: PID $WORKER_PID${NC}\n"

# Trouver le parent (server)
SERVER_PID=$(ps -o ppid= -p $WORKER_PID | tr -d ' ')
echo -e "${BLUE}üì¶ Server parent: PID $SERVER_PID${NC}\n"

# Afficher les file descriptors du worker
echo -e "${YELLOW}üìã File descriptors du worker $WORKER_PID:${NC}"
ls -la /proc/$WORKER_PID/fd/ 2>/dev/null | head -10 || echo "Permission denied"
echo ""

# V√©rifier stdin/stdout
echo -e "${YELLOW}üîó Stdin/Stdout du worker:${NC}"
echo -n "  stdin (fd 0):  "
readlink /proc/$WORKER_PID/fd/0 2>/dev/null || echo "non accessible"
echo -n "  stdout (fd 1): "
readlink /proc/$WORKER_PID/fd/1 2>/dev/null || echo "non accessible"
echo ""

# Afficher les pipes du serveur
echo -e "${YELLOW}üìã File descriptors du serveur $SERVER_PID:${NC}"
ls -la /proc/$SERVER_PID/fd/ 2>/dev/null | grep pipe | head -10 || echo "Aucun pipe visible"
echo ""

# Test d'√©criture directe (n√©cessite root ou owner)
echo -e "${YELLOW}üß™ Test d'√©criture directe au worker...${NC}"

# Construire une requ√™te de test
TEST_REQUEST='{"func_id":"test_123","payload":"hello"}'
echo "  Envoi: $TEST_REQUEST"

# Essayer d'√©crire dans le stdin du worker
if [ -w /proc/$WORKER_PID/fd/0 ]; then
    echo "$TEST_REQUEST" > /proc/$WORKER_PID/fd/0 2>/dev/null && \
        echo -e "${GREEN}  ‚úÖ √âcriture r√©ussie${NC}" || \
        echo -e "${RED}  ‚ùå √âcriture √©chou√©e${NC}"
else
    echo -e "${YELLOW}  ‚ö†Ô∏è  Pas de permission d'√©criture directe${NC}"
fi
echo ""

# V√©rifier si le worker lit
echo -e "${YELLOW}üìä √âtat du worker:${NC}"
ps -o pid,ppid,stat,cmd -p $WORKER_PID
echo ""

# V√©rifier avec strace (si disponible et permission)
if command -v strace &> /dev/null; then
    echo -e "${YELLOW}üî¨ Monitoring du worker pendant 2 secondes...${NC}"
    timeout 2s strace -p $WORKER_PID -e trace=read,write 2>&1 | head -20 || \
        echo -e "${YELLOW}  ‚ö†Ô∏è  strace n√©cessite des permissions root${NC}"
else
    echo -e "${YELLOW}  ‚ö†Ô∏è  strace non disponible${NC}"
fi
echo ""

# Test via le serveur (requ√™te HTTP)
echo -e "${YELLOW}üåê Test via API HTTP...${NC}"
echo "  D√©ploiement d'une fonction de test..."

# Cr√©er une fonction simple
TEST_FUNC=$(mktemp)
cat > $TEST_FUNC << 'EOF'
int main() {
    return 42;
}
EOF

DEPLOY_RESULT=$(curl -s -X POST "http://127.0.0.1:8080/deploy?name=test&lang=c" \
    --data-binary @$TEST_FUNC 2>/dev/null || echo "erreur curl")

rm -f $TEST_FUNC

if echo "$DEPLOY_RESULT" | grep -q '"ok":true'; then
    echo -e "${GREEN}  ‚úÖ D√©ploiement r√©ussi${NC}"
    
    # Extraire l'ID
    FUNC_ID=$(echo "$DEPLOY_RESULT" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo "  ID: $FUNC_ID"
    
    # Tenter l'invocation
    echo ""
    echo "  Invocation de la fonction..."
    
    # Utiliser timeout pour √©viter de bloquer
    INVOKE_RESULT=$(timeout 3s curl -s -X POST "http://127.0.0.1:8080/invoke?fn=$FUNC_ID" 2>/dev/null || echo "timeout")
    
    if [ "$INVOKE_RESULT" = "timeout" ]; then
        echo -e "${RED}  ‚ùå TIMEOUT - Le worker ne r√©pond pas${NC}"
    elif echo "$INVOKE_RESULT" | grep -q "ok"; then
        echo -e "${GREEN}  ‚úÖ Invocation r√©ussie: $INVOKE_RESULT${NC}"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  R√©ponse inattendue: $INVOKE_RESULT${NC}"
    fi
else
    echo -e "${RED}  ‚ùå D√©ploiement √©chou√©: $DEPLOY_RESULT${NC}"
fi
echo ""

# R√©sum√©
echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë  üìä R√©sum√©                            ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""
echo "Workers actifs: $(pgrep -x worker | wc -l)"
echo "Server PID: $SERVER_PID"
echo "Architecture: Server fork() ‚Üí Workers avec pipes"
echo ""

# Diagnostic
if [ -e /proc/$WORKER_PID/fd/0 ]; then
    STDIN_LINK=$(readlink /proc/$WORKER_PID/fd/0 2>/dev/null || echo "unknown")
    if [[ "$STDIN_LINK" == *"pipe"* ]]; then
        echo -e "${GREEN}‚úÖ Les pipes semblent correctement configur√©s${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Si l'invocation timeout, le probl√®me est dans la logique du worker${NC}"
    else
        echo -e "${RED}‚ùå stdin n'est pas un pipe: $STDIN_LINK${NC}"
    fi
else
    echo -e "${RED}‚ùå Impossible d'acc√©der au worker${NC}"
fi
